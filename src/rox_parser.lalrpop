use crate::roxc::{Block, Declaration, Expression, Operation, Param, Statement, Unary};
use std::str::FromStr;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

pub Program: Vec<Declaration> = {
    <(<TopLevelFunctionDeclaration>)*>
}

TopLevelFunctionDeclaration: Declaration = {
    <Function> => Declaration::Function(<>),
}

Function: Box<Statement> = {
    "fn" <Identifier> "(" <Params> ")" <(ReturnType)?> <Block> => Box::new(Statement::FunctionDeclaration(<>))
}

Block: Block = {
    "{" <(<Statement>)*> "}",
}

Statement: Box<Statement> = {
    <Expression> ";" => Box::new(Statement::Expression(<>)),
    <ReturnStatement>,
    <Function> ";",
    <Block> ";" => Box::new(Statement::Block(<>)),
}

ReturnStatement: Box<Statement> = {
    "return" <Expression> ";" => Box::new(Statement::Return(Some(<>))),
    "return" ";" => Box::new(Statement::Return(None)),
}

Expression: Box<Expression> = {
    Assignment
}

Assignment: Box<Expression> = {
    // TODO: Allow for assignment to function results
    // TODO: i.e. `some_call().attribute = 3;`
    <Identifier> "=" <Assignment> => Box::new(Expression::Assignment(<>)),
    "let" <Identifier> "=" <Assignment> => Box::new(Expression::Variable(<>)),
    LogicOr
}

LogicOr: Box<Expression> = {
    <LogicAnd> "or" <LogicAnd> => Box::new(Expression::Or(<>)),
    LogicAnd
}

LogicAnd: Box<Expression> = {
    <Equality> "and" <Equality> => Box::new(Expression::And(<>)),
    Equality
}

Equality: Box<Expression> = {
    Comparison EqualityOp Comparison => Box::new(Expression::Operation(<>)),
    Comparison
}

Comparison: Box<Expression> = {
    Addition ComparisonOp Addition => Box::new(Expression::Operation(<>)),
    Addition
}

Addition: Box<Expression> = {
    Multiplication AdditionOp Multiplication => Box::new(Expression::Operation(<>)),
    Multiplication
}

Multiplication: Box<Expression> = {
    Unary MultiplicationOp Unary => Box::new(Expression::Operation(<>)),
    Unary
}

Unary: Box<Expression> = {
    "!" <Unary> => Box::new(Expression::Unary(Unary::Not, <>)),
    "-" <Unary> => Box::new(Expression::Unary(Unary::Negate, <>)),
    Call,
};

Call: Box<Expression> = {
    <i: Identifier> "(" <args: (Arguments)?> ")" => Box::new(Expression::FunctionCall(i, args.unwrap_or(Vec::new()))),
    Primary
}

ComparisonOp: Operation = {
    ">" => Operation::GreaterThan,
    "<" => Operation::LessThan,
}

EqualityOp: Operation = {
    "==" => Operation::Equals,
    "!=" => Operation::NotEquals,
}

Params: Vec<Param> = {
    <first:(Param)?> <mut rest: ("," <Param>)*> ","? => {
        if let Some(first_param) = first {
            rest.insert(0, first_param);
        }
        rest
    }
}

Param: Param = {
    <i:Identifier> ":" <t:Identifier> => (i, t)
}

ReturnType: String = {
    "->" <Identifier>
}

Arguments: Vec<Box<Expression>> = {
    <mut args:Arguments> "," <expr:Expression> => {
        args.push(expr);
        args
    },
    <Expression> => vec!(<>),
}

MultiplicationOp: Operation = {
    "*" => Operation::Multiply,
    "/" => Operation::Divide,
};

AdditionOp: Operation = {
    "+" => Operation::Add,
    "-" => Operation::Subtract,
};

Primary: Box<Expression> = {
    Boolean => Box::new(Expression::Boolean(<>)),
    Num => Box::new(Expression::Number(<>)),
    String => Box::new(Expression::String(<>)),
    "(" <Expression> ")",
    ! => {
        errors.push(<>);
        Box::new(Expression::ParseError)
    }
};

Boolean: bool = {
    "true" => true,
    "false" => false,
}

Identifier: String = {
    r"[a-zA-Z_]([a-zA-Z0-9_])*" => String::from(<>)
}

Num: f64 = {
    r"[0-9]+(\.)?([0-9]+)?" => f64::from_str(<>).unwrap()
};

String: String = {
    r#""[^"]*""# => String::from(<>)
}
