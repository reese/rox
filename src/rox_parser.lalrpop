use crate::roxc::{Block, Declaration, Expression, Operation, Statement, Param, Type, Unary};
use std::str::FromStr;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

pub Program: Vec<Declaration> = {
    <(<FunctionDeclaration>)*>
}

FunctionDeclaration: Declaration = {
    "let" <Identifier> "=" "fn" "(" <Params> ")" <Block> => Declaration::Function(<>),
}

Statement: Box<Statement> = {
    <TopExpression> ";" => Box::new(Statement::Expression(<>)),
    <Block> => Box::new(Statement::Block(<>)),
    "let" <Identifier> "=" <LogicOr> ";" => Box::new(Statement::Variable(<>)),
    "if" <TopExpression> <Block> <("else" <Block>)?> => Box::new(Statement::IfElse(<>)),
    "while" <LogicOr> <Block> => Box::new(Statement::While(<>)),
    "print" <TopExpression> ";" => Box::new(Statement::Print(<>)),
    "return" <e:TopExpression?> ";" => match e {
        None => Box::new(Statement::Return(None)),
        Some(e) => Box::new(Statement::Return(Some(e))),
    }
};

TopExpression: Box<Expression> = {
    <Assignment>
}

Block: Block = {
    "{" <(<Statement>)*> "}",
}

Assignment: Box<Expression> = {
    <Identifier> "=" <Assignment> => Box::new(Expression::Assignment(<>)),
    <LogicOr>
}

LogicOr: Box<Expression> = {
    <Expression> "or" <Expression> => Box::new(Expression::Or(<>)),
    <LogicAnd>
}

LogicAnd: Box<Expression> = {
    <Expression> "and" <Expression> => Box::new(Expression::And(<>)),
    <Expression>
}

Expression: Box<Expression> = {
    Boolean => Box::new(Expression::Boolean(<>)),
    Expression ExpressionOp Factor => Box::new(Expression::Operation(<>)),
    Factor,
    <Identifier> "(" <(Arguments)?> ")" => Box::new(Expression::FunctionCall(<>)),
    ! => {
        errors.push(<>);
        Box::new(Expression::ParseError)
    }
};

Params: Vec<Param> = {
    <first:(Param)?> <mut rest: ("," <Param>)*> ","? => {
        if let Some(first_param) = first {
            rest.insert(0, first_param);
        }
        rest
    }
}

Param: Param = {
    <i:Identifier> ":" <t:Identifier> => (i, t)
}

Arguments: Vec<Box<Expression>> = {
    <first:TopExpression> <mut rest: ("," <TopExpression>)*> ","? => {
        rest.insert(0, first);
        rest
    }
}

Factor: Box<Expression> = {
    Factor FactorOp Term => Box::new(Expression::Operation(<>)),
    Term,
    Comparison,
};

Comparison: Box<Expression> = {
    Factor ComparisonOp Term => Box::new(Expression::Operation(<>))
}

ComparisonOp: Operation = {
    ">" => Operation::GreaterThan,
    "<" => Operation::LessThan,
    "==" => Operation::Equals,
    "!=" => Operation::NotEquals,
}

FactorOp: Operation = {
    "*" => Operation::Multiply,
    "/" => Operation::Divide,
};

ExpressionOp: Operation = {
    "+" => Operation::Add,
    "-" => Operation::Subtract,
};

Term: Box<Expression> = {
    Num => Box::new(Expression::Number(<>)),
    Identifier => Box::new(Expression::Identifier(<>)),
    String => Box::new(Expression::String(<>)),
    Unary Term => Box::new(Expression::Unary(<>)),
    "(" <Expression> ")"
};

Unary: Unary = {
    "!" => Unary::Not,
    "-" => Unary::Negate,
};

Boolean: bool = {
    "true" => true,
    "false" => false,
}

Identifier: String = {
    r"[a-zA-Z_]([a-zA-Z0-9_])*" => String::from(<>)
}

Num: f64 = {
    r"[0-9]+(\.)?([0-9]+)?" => f64::from_str(<>).unwrap()
};

String: String = {
    r#""[^"]*""# => String::from(<>)
}
